 
#Область ОТУС_РегистрацияОбъектовДляОбмена

Процедура ЗарегистрироватьОбъект(НаборЗаписей) Экспорт  
	
	УстановитьПривилегированныйРежим(Истина);
		
	Для каждого нЗапись Из НаборЗаписей Цикл
				
		МенеджерЗаписи = РегистрыСведений.ОбъектыИнтеграции.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СсылкаНаОбъект  = нЗапись.Документ;
		МенеджерЗаписи.ДатаИзменения = ТекущаяУниверсальнаяДатаВМиллисекундах();		
		МенеджерЗаписи.Состояние = нЗапись.Состояние;
		МенеджерЗаписи.Записать();	
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавлениеОбъектовИнтеграцииПриЗаписи(Источник, Отказ) Экспорт  // запуск
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ДополнительныеСвойства.Свойство("ПолученПриОбмене") 
		И Источник.ДополнительныеСвойства.ПолученПриОбмене Тогда
	     Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.Командировка") Тогда
		
		ЗаявкаСотрудника = Источник.ЗаявкаСотрудника;
		
	Иначе
		ЗаявкаСотрудника = Источник.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыИнтеграции.СсылкаНаОбъект КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.ОбъектыИнтеграции КАК ОбъектыИнтеграции
	|ГДЕ
	|	ОбъектыИнтеграции.СсылкаНаОбъект = &СсылкаНаОбъектДО";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъектДО", ЗаявкаСотрудника);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ОбъектыИнтеграции.СоздатьМенеджерЗаписи();
		НаборЗаписей.СсылкаНаОбъект = ЗаявкаСотрудника;
		НаборЗаписей.ДатаИзменения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		НаборЗаписей.Состояние = Перечисления.СостояниеОбъектовИнтеграции.Ожидает;
		
	Иначе
		НаборЗаписей = РегистрыСведений.ОбъектыИнтеграции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ЗаявкаСотрудника);
		НаборЗаписей.Прочитать();
		Для каждого запись Из НаборЗаписей Цикл
			запись.ДатаИзменения = ТекущаяУниверсальнаяДатаВМиллисекундах();
			запись.Состояние = Перечисления.СостояниеОбъектовИнтеграции.Ожидает;
		КонецЦикла;
				
	КонецЕсли;
	
	НаборЗаписей.Записать();
		
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ДобавлениеОбъектовИнтеграцииПередЗаписью(Источник, Отказ) Экспорт 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
			
КонецПроцедуры
	
#КонецОбласти

#Область  ОбменСообщениями

// формирование сообщения для ДО о принятых объектах
Процедура ОТУС_СформироватьПакетОбменаПринято(ПолученныеДанные, ОписаниеНастройкиПодключения)
	
	Если ПолученныеДанные.Количество() = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
				
	Попытка
		
		мДанные = Новый Массив;
		
		Для каждого эл Из ПолученныеДанные Цикл
			сДокумент = Новый Структура;
			сДокумент.Вставить("GUID", Строка(эл));
			
			мДанные.Добавить(сДокумент);
		КонецЦикла;
		
		
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("ОписаниеНастройкиПодключения", ОписаниеНастройкиПодключения);
		ДанныеСообщения.Вставить("Данные", мДанные);
	
		ОтправитьСообщениеОбменаRebbitMQ(ДанныеСообщения, ОписаниеНастройкиПодключения);
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = '(ОТУС) Синхронизация договоров с 1С:ДО'"), УровеньЖурналаРегистрации.Ошибка,
		, , НСтр("ru = 'Не удалось записать файл сообщений о полученных данных '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;	
		
КонецПроцедуры

 //Запуск ОсновнаяФункцияРегл.задания
Процедура ОТУС_ПолучитьИзменения()Экспорт  
	//получение информации о принятых объектах
	ОТУС_ПолучитьПакетОбмена();
	
	НачалоПодготовки = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	//получение изменений
	ОТУС_ПолучитьСообщениеОбмена();
	ОТУС_СоздатьСообщениеОбмена(НачалоПодготовки);
КонецПроцедуры

#Область ПолучениеПакетаОбмена

//получение информации о принятых объектах в ДО	

Процедура ОТУС_ПолучитьПакетОбмена()  
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСообщения = ПолучитьСообщениеОбменаRebbitMQ("Принята ЗаявкаНаКомандировку в ДО");

	Если Не ЗначениеЗаполнено(ДанныеСообщения) Тогда
	     Возврат;
	КонецЕсли;
	
	ПолученныеДанные = Новый Массив;
		
	Попытка
		НачатьТранзакцию();
		
		мПолученныеДанные = Новый Массив;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ДанныеСообщения);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		    Возврат;
		КонецЕсли;
		
		Если Не Результат.Свойство("ОписаниеНастройкиПодключения") Тогда
		    Возврат;
		КонецЕсли;
		Если Не Результат.Свойство("Данные") Тогда
		    Возврат;
		КонецЕсли;
		
		мРезультат = Результат.Данные;
		Если Не ТипЗнч(мРезультат) = Тип("Массив") Тогда
		    Возврат;
		КонецЕсли;
		Если мРезультат.Количество() = 0 Тогда
		    Возврат;
		КонецЕсли;
		
		ОТУС_ЗарегистрироватьПолучениеОбъектов(мРезультат);
		
		ЗафиксироватьТранзакцию();	
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = '(ОТУС) Синхронизация договоров с 1С:ДО'"), УровеньЖурналаРегистрации.Ошибка,
		, , НСтр("ru = 'Ошибка получения данных: '") + "Принята ЗаявкаНаКомандировку в ДО " + ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;		
		
КонецПроцедуры

Процедура ОТУС_ЗарегистрироватьПолучениеОбъектов(мРезультат)

	Для Каждого Объект_Документ Из мРезультат Цикл
			ОТУС_ЗарегистрироватьПолучениеОбъектов_Продолжение(Объект_Документ);		
	КонецЦикла;
	

КонецПроцедуры

Процедура ОТУС_ЗарегистрироватьПолучениеОбъектов_Продолжение(Объект_Документ)

	GUID = Объект_Документ.GUID;
	ЗаявкаНаКомандировку = Документы.ЗаявкаНаКомандировку.ПолучитьСсылку(Новый УникальныйИдентификатор(GUID));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДР.СсылкаНаОбъект КАК СсылкаНаОбъектДО
		|ИЗ
		|	РегистрСведений.ОбъектыИнтеграции КАК ДР
		|ГДЕ
		|	ДР.СсылкаНаОбъект = &СсылкаНаОбъект
		|	И НЕ ДР.Состояние = &СостояниеОжидает";
	
	Запрос.УстановитьПараметр("СостояниеОжидает", Перечисления.СостояниеОбъектовИнтеграции.Ожидает);
	Запрос.УстановитьПараметр("СсылкаНаОбъект", ЗаявкаНаКомандировку);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ОбъектыИнтеграции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ЗаявкаНаКомандировку);
		НаборЗаписей.Прочитать();
		Для каждого запись Из НаборЗаписей Цикл
			запись.ДатаИзменения = ТекущаяУниверсальнаяДатаВМиллисекундах();
			запись.Состояние = Перечисления.СостояниеОбъектовИнтеграции.Принят;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОТУС_ПолучениеСообщенияОбмена

Процедура ОТУС_ПолучитьСообщениеОбмена()

	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеСообщения = ПолучитьСообщениеОбменаRebbitMQ("ЗаявкаНаКомандировку из ДО в ЗУП");
	
	Если Не ЗначениеЗаполнено(ДанныеСообщения) Тогда
	     Возврат;
	КонецЕсли;
	
	ПолученныеДанные = Новый Массив;
	
	Попытка
		НачатьТранзакцию();
		
		мПолученныеДанные = Новый Массив;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ДанныеСообщения);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		    Возврат;
		КонецЕсли;
		Если Не Результат.Свойство("Документ_ЗаявкаНаКомандировку") Тогда
		    Возврат;
		КонецЕсли;
		
		мРезультат = Результат.Документ_ЗаявкаНаКомандировку;
		Если Не ТипЗнч(мРезультат) = Тип("Массив") Тогда
		    Возврат;
		КонецЕсли;
		Если мРезультат.Количество() = 0 Тогда
		    Возврат;
		КонецЕсли;
		
		ОТУС_Получить_ЗаявкаНаКомандировку(мРезультат, мПолученныеДанные);
					
		Для каждого эл Из мПолученныеДанные Цикл
			ПолученныеДанные.Добавить(эл);
		КонецЦикла;
		
		// формирование сообщение об обработанных данных
		ОТУС_СформироватьПакетОбменаПринято(ПолученныеДанные, "Принята ЗаявкаНаКомандировку в ЗУП");
		
		ЗафиксироватьТранзакцию();	
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = '(ОТУС) Синхронизация договоров с 1С:ДО'"), УровеньЖурналаРегистрации.Ошибка,
		, , НСтр("ru = 'Ошибка получения данных из ДО: '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;		
			
КонецПроцедуры

Процедура ОТУС_Получить_ЗаявкаНаКомандировку(мРезультат, мПолученныеДанные)   

	
	Для Каждого Объект_Документ Из мРезультат Цикл
		ОТУС_ПолучитьДанные_ЗаявкаНаКомандировку(Объект_Документ, мПолученныеДанные);		
	КонецЦикла;
		
	
КонецПроцедуры

Процедура ОТУС_ПолучитьДанные_ЗаявкаНаКомандировку(Объект_Документ, мПолученныеДанные) 
	
		
	GUID = Объект_Документ.GUID;
	
	// Сотрудник
	ДанныеФизЛица =  ОТУС_ПолучитьФизЛицо(Объект_Документ.Сотрудник);
	Если Не ЗначениеЗаполнено(ДанныеФизЛица) Тогда
		Возврат;
	КонецЕсли;
	
	// организация
	Организация = ОТУС_ПолучитьОрганизацию(Объект_Документ.Организация); 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВД = ДатаИзСтроки(Объект_Документ.Дата);
	ДатаНачала = ДатаИзСтроки(Объект_Документ.ДатаНачала);
	ДатаОкончания  = ДатаИзСтроки(Объект_Документ.ДатаОкончания);
	ДатаРассмотрения  = ДатаИзСтроки(Объект_Документ.ДатаРассмотрения);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаКомандировку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаКомандировку КАК ЗаявкаНаКомандировку
	|ГДЕ
	|	ЗаявкаНаКомандировку.ОТУС_ДатаВходящегоДокумента = &ОТУС_ДатаВходящегоДокумента
	|	И ЗаявкаНаКомандировку.ОТУС_НомерВходящегоДокумента = &ОТУС_НомерВходящегоДокумента
	|	И ЗаявкаНаКомандировку.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ОТУС_ДатаВходящегоДокумента", НачалоДня(ДатаВД));
	Запрос.УстановитьПараметр("ОТУС_НомерВходящегоДокумента", Объект_Документ.Номер);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеФизЛица);

	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда	   
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
	    ДокументОбъект = Документы.ЗаявкаНаКомандировку.СоздатьДокумент();
	КонецЕсли;
			
	Если Не ДокументОбъект.ПометкаУдаления = Булево(Объект_Документ.ПометкаУдаления)Тогда 
		ДокументОбъект.УстановитьПометкуУдаления(Булево(Объект_Документ.ПометкаУдаления));
	КонецЕсли;
	
	ДокументОбъект.Дата = ДатаВД;
	
	ДокументОбъект.ДатаНачала = ДатаНачала;
	ДокументОбъект.ДатаОкончания = ДатаОкончания;
	
	ДокументОбъект.ОТУС_ДатаВходящегоДокумента = ДатаВД;
	ДокументОбъект.ОТУС_НомерВходящегоДокумента = Объект_Документ.Номер;
	
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.ФизическоеЛицо = ДанныеФизЛица;
	
	ДокументОбъект.ОрганизацияНазначения = Объект_Документ.ОрганизацияНазначения;
	ДокументОбъект.МестоНазначения = Объект_Документ.МестоНазначения;
	ДокументОбъект.Цель = Объект_Документ.Цель;
	ДокументОбъект.Рассмотрел = Объект_Документ.КтоРешил;
	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаявокСотрудников[Объект_Документ.Статус];
	ДокументОбъект.ДатаРассмотрения = ДатаРассмотрения;
	
	
	ДокументОбъект.БронироватьБилеты = Ложь;
	ДокументОбъект.БронироватьПроживание = Ложь;
	
	#Область ЗаполнитьЛичныеДанные
	Если Не ЗначениеЗаполнено(ДокументОбъект.ФамилияВПаспорте) Тогда
	
		КадровыеДанные = 
		"Пол,
		|ДатаРождения,
		|Страна,
		|Фамилия,
		|Имя,
		|Отчество,
		|ТелефонМобильныйПредставление,
		|EMailПредставление";
	
	СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.ФизическоеЛицо);
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизическихЛиц, КадровыеДанные);
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных = ТаблицаДанных[0];
	
	ДокументОбъект.Пол = СтрокаДанных.Пол;
	ДокументОбъект.ДатаРождения = СтрокаДанных.ДатаРождения;
	ДокументОбъект.Гражданство = СтрокаДанных.Страна;
	
	ДокументОбъект.ФамилияВПаспорте = СтрокаДанных.Фамилия;
	ДокументОбъект.ИмяВПаспорте = СтрокаДанных.Имя;
	ДокументОбъект.ОтчествоВПаспорте = СтрокаДанных.Отчество;
	
	ДокументОбъект.Телефон = СтрокаДанных.ТелефонМобильныйПредставление;
	ДокументОбъект.EMail = СтрокаДанных.EMailПредставление;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ФамилияВПаспорте) Тогда
		ДокументОбъект.ФамилияВПаспорте = ДанныеФизЛица.Фамилия;
		ДокументОбъект.ИмяВПаспорте = ДанныеФизЛица.Имя;
		ДокументОбъект.ОтчествоВПаспорте = ДанныеФизЛица.Отчество;
		
	КонецЕсли;
	
	ДокументОбъект.ФамилияЛатиницей = СтроковыеФункции.СтрокаЛатиницей(ДокументОбъект.ФамилияВПаспорте);
	ДокументОбъект.ИмяЛатиницей = СтроковыеФункции.СтрокаЛатиницей(ДокументОбъект.ИмяВПаспорте);
	
	#КонецОбласти
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.СистемаБронирования) Тогда
		ДокументОбъект.СистемаБронирования = Перечисления.СистемыБронированияКомандировок.Smartway; 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидТранспорта) Тогда
		ДокументОбъект.ВидТранспорта = Перечисления.ВидыТранспортаБронированияБилетов.Самолет;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.ВидЗапросаМестаПроживания) Тогда
		ДокументОбъект.ВидЗапросаМестаПроживания = Перечисления.ВидыЗапросаБронированияМестаПроживания.Гостиница;
	КонецЕсли;
	
	Если Булево(Объект_Документ.БронироватьБилетыТуда) 
		ИЛИ Булево(Объект_Документ.БронироватьБилетыОбратно) Тогда
		БронироватьБилеты = Истина;
	Иначе	
		БронироватьБилеты = Ложь;
	КонецЕсли;
	ДокументОбъект.БронироватьБилеты = БронироватьБилеты;
	
	Если БронироватьБилеты Тогда
	    ДокументОбъект.БилетВОдинКонец = Не Булево(Объект_Документ.БронироватьБилетыОбратно);
	Иначе		
	    ДокументОбъект.БилетВОдинКонец = Ложь;
	КонецЕсли;
	
	ДокументОбъект.БронироватьПроживание  = Булево(Объект_Документ.БронироватьПроживание);
	
	Проведен = Объект_Документ.Проведен;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПолученПриОбмене", Истина);	
	
	Попытка
	Если Не ДокументОбъект.Проведен = Проведен Тогда
		Если Не Проведен Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);  
		Иначе	
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЕсли;
	
	мПолученныеДанные.Добавить(Объект_Документ.GUID);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать документ. 
		|Описание ошибки:
		|%1'");
		Сообщение =  СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(НСтр("ru = '(ОТУС) Синхронизация договоров с 1С:ДО'"), УровеньЖурналаРегистрации.Ошибка, , , Сообщение);
	КонецПопытки;

КонецПроцедуры

Функция ОТУС_ПолучитьФизЛицо(сФизЛицо)

	Если ЗначениеЗаполнено(сФизЛицо.GUID) Тогда
		ФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(сФизЛицо.GUID));
		Если Найти(Строка(ФизЛицо),"Объект не найден") = 0 
			И Найти(Строка(ФизЛицо),"Object not found") = 0 Тогда
			Возврат ФизЛицо;
		КонецЕсли;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФЛ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФЛ
		|ГДЕ
		|	&Условие";
				
	Если ЗначениеЗаполнено(сФизЛицо.СтраховойНомерПФР) Тогда
	     Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ФЛ.СтраховойНомерПФР = &СтраховойНомерПФР");
		 Запрос.УстановитьПараметр("СтраховойНомерПФР", сФизЛицо.СтраховойНомерПФР);
	ИначеЕсли ЗначениеЗаполнено(сФизЛицо.ИНН) Тогда
	     Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ФЛ.ИНН = &ИНН");
		 Запрос.УстановитьПараметр("ИНН", сФизЛицо.ИНН);
	Иначе
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ФЛ.Фамилия = &Фамилия
																 |	И ФЛ.Имя = &Имя
																 |	И ФЛ.Отчество = &Отчество");
		 Запрос.УстановитьПараметр("Фамилия", сФизЛицо.Фамилия);
		 Запрос.УстановитьПараметр("Имя", сФизЛицо.Имя);
		 Запрос.УстановитьПараметр("Отчество", сФизЛицо.Отчество);
		 
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
	    Возврат Выборка.Ссылка;
	Иначе	
		ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		Если ЗначениеЗаполнено(сФизЛицо.GUID) Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор(сФизЛицо.GUID);
			Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(УникальныйИдентификатор);
			ФизЛицоОбъект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		ФизЛицоОбъект.ФИО = сФизЛицо.Фамилия + ?(ЗначениеЗаполнено(сФизЛицо.Имя)," " +  сФизЛицо.Имя, "") + ?(ЗначениеЗаполнено(сФизЛицо.Отчество)," " +  сФизЛицо.Отчество, "");
		ФизЛицоОбъект.Наименование = ФизЛицоОбъект.ФИО;
		
		ФизЛицоОбъект.Фамилия = сФизЛицо.Фамилия;
		ФизЛицоОбъект.Имя = сФизЛицо.Имя;
		ФизЛицоОбъект.Отчество = сФизЛицо.Отчество;
		
		ФизЛицоОбъект.ИНН = сФизЛицо.ИНН;
		ФизЛицоОбъект.СтраховойНомерПФР = сФизЛицо.СтраховойНомерПФР;
	
		Попытка
			ФизЛицоОбъект.Записать();
			Возврат ФизЛицоОбъект.Ссылка;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = '(ОТУС) Синхронизация договоров с 1С:ДО'"), УровеньЖурналаРегистрации.Ошибка,
			, , НСтр("ru = 'Ошибка создания физ.лица: '") + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	

КонецФункции // ()

Функция ОТУС_ПолучитьОрганизацию(сОрганизация)

	Если ЗначениеЗаполнено(сОрганизация.Организация_GUID) Тогда
		Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(сОрганизация.Организация_GUID));
		Если Найти(Строка(Организация),"Объект не найден") = 0 
			И Найти(Строка(Организация),"Object not found") = 0 Тогда
			Возврат Организация;
		КонецЕсли;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК ДД
		|ГДЕ
		|	ДД.ИНН = &ИНН";
				
	Запрос.УстановитьПараметр("ИНН", сОрганизация.Организация_ИНН);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
	    Возврат Выборка.Ссылка;
	Иначе	
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();
		Если ЗначениеЗаполнено(сОрганизация.Организация_GUID) Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор(сОрганизация.Организация_GUID);
			Ссылка = Справочники.Организации.ПолучитьСсылку(УникальныйИдентификатор);
			ОрганизацияОбъект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
		ОрганизацияОбъект.Наименование = сОрганизация.ОрганизацияНаименование;
		ОрганизацияОбъект.НаименованиеПолное = сОрганизация.ОрганизацияНаименование;
		ОрганизацияОбъект.НаименованиеСокращенное = сОрганизация.ОрганизацияНаименование;
		
		ОрганизацияОбъект.ИНН = сОрганизация.Организация_ИНН;
		
		Попытка
			ОрганизацияОбъект.Записать();
			Возврат ОрганизацияОбъект.Ссылка;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = '(ОТУС) Синхронизация договоров с 1С:ДО'"), УровеньЖурналаРегистрации.Ошибка,
			, , НСтр("ru = 'Ошибка создания организации: '") + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	

КонецФункции // ()

#КонецОбласти

#Область СозданиеСообщенияОбмена

Процедура ОТУС_СоздатьСообщениеОбмена(НачалоПодготовки)
	
	
	УстановитьПривилегированныйРежим(Истина);
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	рт_ОбъектыИнтеграции.СсылкаНаОбъект КАК СсылкаНаОбъект
		|ПОМЕСТИТЬ СписокОбъекты
		|ИЗ
		|	РегистрСведений.ОбъектыИнтеграции КАК рт_ОбъектыИнтеграции
		|ГДЕ
		|	рт_ОбъектыИнтеграции.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеОбъектовИнтеграции.Ожидает)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаКомандировку.Ссылка КАК Ссылка,
		|	ЗаявкаНаКомандировку.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗаявкаНаКомандировку.ОТУС_ДатаВходящегоДокумента КАК ОТУС_ДатаВходящегоДокумента,
		|	ЗаявкаНаКомандировку.ОТУС_НомерВходящегоДокумента КАК ОТУС_НомерВходящегоДокумента,
		|	ЗаявкаНаКомандировку.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ПОМЕСТИТЬ ВТ_ОсновныеДанные
		|ИЗ
		|	СписокОбъекты КАК СписокОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаКомандировку КАК ЗаявкаНаКомандировку
		|		ПО СписокОбъекты.СсылкаНаОбъект = ЗаявкаНаКомандировку.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОсновныеДанные.Ссылка КАК Ссылка,
		|	ВТ_ОсновныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_ОсновныеДанные.ОТУС_ДатаВходящегоДокумента КАК ОТУС_ДатаВходящегоДокумента,
		|	ВТ_ОсновныеДанные.ОТУС_НомерВходящегоДокумента КАК ОТУС_НомерВходящегоДокумента,
		|	ЕСТЬNULL(ФизическиеЛица.Фамилия, ВЫРАЗИТЬ("""" КАК СТРОКА(50))) КАК Фамилия,
		|	ЕСТЬNULL(ФизическиеЛица.Имя, ВЫРАЗИТЬ("""" КАК СТРОКА(50))) КАК Имя,
		|	ЕСТЬNULL(ФизическиеЛица.Отчество, ВЫРАЗИТЬ("""" КАК СТРОКА(50))) КАК Отчество,
		|	ЕСТЬNULL(ФизическиеЛица.ИНН, ВЫРАЗИТЬ("""" КАК СТРОКА(12))) КАК ИНН,
		|	ЕСТЬNULL(ФизическиеЛица.СтраховойНомерПФР, ВЫРАЗИТЬ("""" КАК СТРОКА(10))) КАК СтраховойНомерПФР,
		|	ВТ_ОсновныеДанные.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ИЗ
		|	ВТ_ОсновныеДанные КАК ВТ_ОсновныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО ВТ_ОсновныеДанные.ФизическоеЛицо = ФизическиеЛица.Ссылка";
			
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	    ЗаписьЖурналаРегистрации(НСтр("ru = '(ОТУС) Синхронизация заявки на командировку с 1С:ДО'"), УровеньЖурналаРегистрации.Информация,
					, , НСтр("ru = 'Нет данных для отправки'"));
		Возврат;
	КонецЕсли;
							
	НачатьТранзакцию();		

	Попытка
		мДанные = Новый Массив;
				
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			сДокумент = Новый Структура;
			//сДокумент.Вставить("", );
			
			GUID = GUIDПоСсылке(Выборка.Ссылка);
			сДокумент.Вставить("GUID"						, Строка(GUID));
			
			сДокумент.Вставить("Номер"						, Выборка.ОТУС_НомерВходящегоДокумента);
			сДокумент.Вставить("Дата"						, ПредставлениеДаты(Выборка.ОТУС_ДатаВходящегоДокумента));
						
            GUID = GUIDПоСсылке(Выборка.ФизическоеЛицо);
			сСотрудник = Новый Структура;			
			сСотрудник.Вставить("GUID"			, Строка(GUID));			
			сСотрудник.Вставить("Фамилия"			, Выборка.Фамилия);
		    сСотрудник.Вставить("Имя"				, Выборка.Имя);
		    сСотрудник.Вставить("Отчество"		, Выборка.Отчество);
		    сСотрудник.Вставить("ИНН"				, Выборка.ИНН);
		    сСотрудник.Вставить("СтраховойНомерПФР", Выборка.СтраховойНомерПФР);
			
			сДокумент.Вставить("Сотрудник"					, сСотрудник);
			
			// данные командировки
			Заявки = Новый Массив;
			Заявки.Добавить(Выборка.Ссылка);
			Если ЗначениеЗаполнено(Выборка.ИсправленныйДокумент) Тогда
				Заявки.Добавить(Выборка.ИсправленныйДокумент);
			КонецЕсли;
			
			КадровыеПриказы = КадровыеПриказыЗаявокСотрудников(Заявки);
	        КадровыйПриказ = КадровыеПриказы[Выборка.Ссылка];
	
			// Кадровый приказ исправленной заявки.
			КадровыйПриказИсправленный = КадровыеПриказы[Выборка.ИсправленныйДокумент];
			КадровыйПриказ = ?(КадровыйПриказИсправленный = Неопределено, КадровыйПриказ, КадровыйПриказИсправленный);
			
			сДокумент.Вставить("ЕстьКомандировка"					, ?(КадровыйПриказ = Неопределено, "Ложь", "Истина"));
			сДокумент.Вставить("Сумма"							, ПредставлениеЧисла(0));		
			
			Если Не  КадровыйПриказ = Неопределено Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СУММА(КомандировкаНачисления.Результат) КАК Результат,
				|	КомандировкаНачисления.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.Командировка.Начисления КАК КомандировкаНачисления
				|ГДЕ
				|	КомандировкаНачисления.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	КомандировкаНачисления.Ссылка";
				
				Запрос.УстановитьПараметр("Ссылка", КадровыйПриказ);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаКомандировка = РезультатЗапроса.Выбрать();
				
				Если ВыборкаКомандировка.Следующий() Тогда
					сДокумент.Сумма = ПредставлениеЧисла(ВыборкаКомандировка.Результат);
				КонецЕсли;
				
				
			КонецЕсли;		
			
			мДанные.Добавить(сДокумент);
		КонецЦикла;
		
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("Документ_ЗаявкаНаКомандировку", мДанные);
		
		ОтправитьСообщениеОбменаRebbitMQ(ДанныеСообщения, "ЗаявкаНаКомандировку из ЗУП в ДО");
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОбъектыИнтеграции.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			Для каждого запись Из НаборЗаписей Цикл
				запись.ДатаИзменения = ТекущаяУниверсальнаяДатаВМиллисекундах();
				запись.Состояние = Перечисления.СостояниеОбъектовИнтеграции.Отправлен;
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = '(РТК) Синхронизация заявки на командировку 1С:ЗУП'"), УровеньЖурналаРегистрации.Ошибка,
		, , НСтр("ru = 'Не удалось отправит файл сообщений '") + ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция КадровыеПриказыЗаявокСотрудников(СписокЗаявокСотрудников)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокЗаявокСотрудников", СписокЗаявокСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыОтпуска.Ссылка КАК Регистратор,
		|	ДокументыОтпуска.ЗаявкаСотрудника КАК ЗаявкаСотрудника
		|ИЗ
		|	Документ.Отпуск КАК ДокументыОтпуска
		|ГДЕ
		|	ДокументыОтпуска.ЗаявкаСотрудника В(&СписокЗаявокСотрудников)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыКомандировки.Ссылка,
		|	ДокументыКомандировки.ЗаявкаСотрудника
		|ИЗ
		|	Документ.Командировка КАК ДокументыКомандировки
		|ГДЕ
		|	ДокументыКомандировки.ЗаявкаСотрудника В(&СписокЗаявокСотрудников)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	КадровыеПриказы = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		КадровыеПриказы.Вставить(Выборка.ЗаявкаСотрудника, Выборка.Регистратор);
	КонецЦикла;
	
	Возврат КадровыеПриказы;
	
КонецФункции

#Область ОТУС_СозданиеСообщенияОбмена_ВспомогательныеПроцедурыФункции

Функция ПредставлениеДаты(Значение)
	//Возврат Формат(Значение, "ДЛФ=DT");
	Возврат Формат(Значение, "ДФ='yyyyMMddhhmmss'");
КонецФункции

Функция ПредставлениеБулево(Значение)
	Возврат ?(Значение, "ИСТИНА", "ЛОЖЬ");
КонецФункции

Функция ПредставлениеЧисла(Значение)
	Возврат Формат(Значение, "ЧГ=");
КонецФункции

Функция GUIDПоСсылке(Значение)
	Возврат Значение.УникальныйИдентификатор();
КонецФункции

Функция СсылкаПоGUID(GUID, Тип = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов КАК ПубличныеИдентификаторыСинхронизируемыхОбъектов
	|ГДЕ
	|	ПубличныеИдентификаторыСинхронизируемыхОбъектов.Идентификатор = &Идентификатор
	|	И (&БезОтбораПоТипам
	|		ИЛИ ТИПЗНАЧЕНИЯ(ПубличныеИдентификаторыСинхронизируемыхОбъектов.Ссылка) = &Тип)";
	Запрос.УстановитьПараметр("Идентификатор", GUID);
	Запрос.УстановитьПараметр("БезОтбораПоТипам", Тип = Неопределено);
	Запрос.УстановитьПараметр("Тип", Тип);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
	Возврат Неопределено
КонецФункции

Функция ПредставлениеПеречисления(Значение)
	
	результат = "";
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		результат = Строка(Значение);
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции	

Функция ЧислоИзСтроки(Значение)
	Возврат ?(ПустаяСтрока(Значение), 0, Число(Значение));
КонецФункции

Функция ДатаИзСтроки(Значение)
	Возврат ?(ПустаяСтрока(Значение), '00010101', Дата(Значение));
КонецФункции

#КонецОбласти

 #Область ОтправитьСообщениеRebbitMQ
 
 Процедура ОтправитьСообщениеОбменаRebbitMQ(Данные, ДопУсловие = "")
 
 	Настройки = RebbitMQСервер.ПолучитьНастройкиПодключенияИзРегистра(ДопУсловие);
	
	Компонента = RebbitMQСервер.ПолучитьКомпоненту();
	
	ТекстJSON = RebbitMQКлиентСервер.СериализоватьВJSON(Данные);		
	
	RebbitMQКлиентСервер.ОтправитьСообщение(Компонента, Настройки, ТекстJSON);
 
 КонецПроцедуры
 
Функция ПолучитьСообщениеОбменаRebbitMQ(ДопУсловие = "")
 
 	Настройки = RebbitMQСервер.ПолучитьНастройкиПодключенияИзРегистра(ДопУсловие);
	
	Компонента = RebbitMQСервер.ПолучитьКомпоненту();
	
	ДанныеСообщения = RebbitMQКлиентСервер.ПрочитатьСообщение(Компонента, Настройки);
	
	Возврат  ДанныеСообщения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти