 // Формирует в обработчике документа ОбработкаПроведения() движения по регистрам, определенных в учетных документах.
//
// Параметры:
//	Документ - ДокументОбъект - Записываемый документ.
//	Отказ - Булево - Признак отказа от записи.
//	ДопПараметры - см. ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения.
//
Процедура ОбработкаПроведенияДокумента(Документ, Отказ, ДопПараметры = Неопределено) Экспорт
	
	
	
КонецПроцедуры

Процедура ПровестиДокумент(Документ, Отказ, ДопПараметры)
	
		
КонецПроцедуры

// Функция возвращает учетные механизмы документа.
//
// Параметры:
//  Документ - ДокументМенеджер - менеджер документа для которого требуется получить учетные механизмы. 
//  
// Возвращаемое значение:
//  Массив Из Строка- содержит учетные механизмы документа.
//
Функция УчетныеМеханизмыДокумента(Документ) Экспорт 
	
	МеханизмыДокумента = Новый Массив;
	Документ.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
	Возврат МеханизмыДокумента;
		
КонецФункции

// Адаптирует запрос механизма проведения для использования в функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения,
// делая его запросом для всех проведенных документов.
// Параметры:
//  ИзначальныйТекстЗапроса - Строка - текст запроса механизма проведения, который или формирует таблицу движений, или
//										создает временные таблицы, используемые в запросах формирующих таблицы движений.
//										см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса
//										Требования к тексту запроса следующие.
//										  Все объединяемые таблицы запроса, формирующего таблицу движений имеют один синоним.
//										  Если есть соединения с другими таблицами, то оно реализовано таким образом, 
//											что будет корректно работать, если не установлен отбор по ссылке;
//										  Не используются временные таблицы;
//										  Не используются вложенные запросы и группировки;
//										  Нет упорядочивания;
//										  параметры запроса рассчитываются или по данным шапки, или являются значениями констант;
// 										  Для всех полей непримитивных типов заполнены значения по умолчанию, как они хранятся в регистре;
//											это или пустая ссылка типа, или НЕОПРЕДЕЛЕНО (для полей составного типа), то НЕ должно быть NULL
//										  параметр, устанавливающий отбор по ссылке называется &Ссылка;
//										  В конце запроса не должно быть знака ";"
// 										  В тексте запроса, формирующим таблицу движения, должны выбираться только значимые
//											для формирования движений поля (нет полей НомерСтроки, Порядок и т.д.).
//  ПолноеИмяДокумента				 - Строка - полное имя документа, как оно задается в языке запросов (например, Документ.ВводОстатков)
//  СинонимТаблицыДокумента			 - Строка - синоним таблицы документа, используемый в запросе
//  ПереопределениеРасчетаПараметров - Структура - по умолчанию все параметры, которые есть в запросе заменяются на <СинонимТаблицыДокумента>.Ссылка.<ИмяПараметра>
//  												Для параметра &Период по умолчанию подставляется <СинонимТаблицыДокумента>.Ссылка.Дата
//  												Если параметры рассчитываются иначе, то в этой структуре в ключе передается имя параметра, в значении
//													  выражение для его расчета.
//  ТекстыЗапросаВременныхТаблиц     - Соответствие - тексты запросов временных таблиц, используемых в тексте запроса
//                                                    механизма проведения.
//													  Ключ соответствия - имя временной таблицы, Значение - текст запроса временной таблицы.
//													  Параметр необходимо использовать когда механизм формирования движений опирается не на
//													  физическую таблицу документа, а на предварительно созданную временную таблицу.
//													  Поля выборки временной таблицы должны содержать поле "Ссылка" - ссылку на физическую таблицу проводимого документа.
//													  Вложенные временные таблицы не поддерживаются.
//
// Возвращаемое значение:
//  Строка - адаптированный текст запроса.
//
Функция АдаптироватьЗапросМеханизмаПроведения(Знач ИзначальныйТекстЗапроса,
														ПолноеИмяДокумента,
														СинонимТаблицыДокумента,
														ПереопределениеРасчетаПараметров = Неопределено,
														ТекстыЗапросаВременныхТаблиц = Неопределено) Экспорт
														
	Если ПереопределениеРасчетаПараметров = Неопределено Тогда
		ПереопределениеРасчетаПараметров = Новый Структура;
	КонецЕсли;
	
	Если СтрНайти(ИзначальныйТекстЗапроса, "КАК Регистратор,") = 0 Тогда // @query-part
		
		ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
											"ВЫБРАТЬ", // @query-part
											"ВЫБРАТЬ
											|	ТаблицаДокументаОбновлениеИБ.Ссылка КАК Регистратор,"); // @query-part
		
	КонецЕсли;
				
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
										"ГДЕ",
										"
										|ГДЕ
										|	ТаблицаДокументаОбновлениеИБ.Ссылка.Проведен
										|	И ");
	
	Если ТекстыЗапросаВременныхТаблиц <> Неопределено Тогда
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			Для Каждого ДругойЭлемент Из ТекстыЗапросаВременныхТаблиц Цикл
				
				Если Элемент.Ключ <> ДругойЭлемент.Ключ Тогда
					
					Если СтрНайти(ДругойЭлемент.Значение, Элемент.Ключ) <> 0 Тогда
						ВызватьИсключение НСтр("ru = 'Адаптированный текст запроса. Вложенные временные таблицы не поддерживаются.'");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Элемент Из ТекстыЗапросаВременныхТаблиц Цикл
			
			ПервыйСимвол = СтрНайти(Элемент.Значение, "ПОМЕСТИТЬ");
			ПоследнийСимвол = СтрНайти(Элемент.Значение, Элемент.Ключ, НаправлениеПоиска.СНачала, ПервыйСимвол) + СтрДлина(Элемент.Ключ);
			ПодстановкаПоиска = Сред(Элемент.Значение, ПервыйСимвол, ПоследнийСимвол - ПервыйСимвол);
			ПодстановкаВременнойТаблицы = СтрЗаменить(Элемент.Значение, ПодстановкаПоиска, "");
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса, Элемент.Ключ, "(" + ПодстановкаВременнойТаблицы + ")");
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,СинонимТаблицыДокумента,"ТаблицаДокументаОбновлениеИБ");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"ТаблицаДокументаОбновлениеИБ.Ссылка = &Ссылка","ИСТИНА");
	ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,
											"ТаблицаДокументаОбновлениеИБ.Ссылка В (&Ссылка)",
											"ИСТИНА");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИзначальныйТекстЗапроса;
	
	// Параметры запроса нужно упорядочить по наименованию в обратном порядке,
	// т.к. их имена могут начинаться одинаково, например, "Номер", "НомерНаПечать".
	ПараметрыЗапроса = Новый СписокЗначений;
	Для каждого ПараметрЗапроса Из Запрос.НайтиПараметры() Цикл
		ПараметрыЗапроса.Добавить(ПараметрЗапроса.Имя);
	КонецЦикла; 
	ПараметрыЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ПолноеИмяДокумента);
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		
		ТекстЗамены = Неопределено;
		
		Если ПереопределениеРасчетаПараметров.Свойство(Параметр.Значение) Тогда
			ТекстЗамены = ПереопределениеРасчетаПараметров[Параметр.Значение];
			ТекстЗамены = СтрЗаменить(ТекстЗамены, СинонимТаблицыДокумента, "ТаблицаДокументаОбновлениеИБ");
		ИначеЕсли Параметр.Значение = "Ссылка" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка";
		ИначеЕсли Параметр.Значение = "Период" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка.Дата";
		ИначеЕсли МетаданныеДокумента.Реквизиты.Найти(Параметр.Значение) <> Неопределено
			ИЛИ Параметр.Значение = "Проведен"
			ИЛИ Параметр.Значение = "ПометкаУдаления"
			ИЛИ Параметр.Значение = "Номер"
			ИЛИ Параметр.Значение = "Дата" Тогда
			ТекстЗамены = "ТаблицаДокументаОбновлениеИБ.Ссылка." + Параметр.Значение;
		КонецЕсли;	
		
		Если ТекстЗамены <> Неопределено Тогда
			ИзначальныйТекстЗапроса = СтрЗаменить(ИзначальныйТекстЗапроса,"&" + Параметр.Значение, ТекстЗамены);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ИзначальныйТекстЗапроса;
	
КонецФункции

// Результат адаптации запроса для функции ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения.
// 
// Возвращаемое значение:
//  Структура - поля:
//	* ТекстЗапроса - Строка - должен быть объявлен обязательно, адаптированный текст запроса
//	* ЗначенияПараметров - Структура - значения параметров запроса, которые вычисляются из констант
//										(не зависят от конкретного документа).
//
Функция РезультатАдаптацииЗапроса() Экспорт
	
	РезультатАдаптацииЗапроса = Новый Структура;
	РезультатАдаптацииЗапроса.Вставить("ТекстЗапроса");
	РезультатАдаптацииЗапроса.Вставить("ЗначенияПараметров", Новый Структура);
	
	Возврат РезультатАдаптацииЗапроса;
КонецФункции

#Область СобытияДокумента

// Инициализирует в обработчике документа ПередЗаписью() свойства, необходимые для проведения документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим проведения документа
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписьюДокумента(Документ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Документ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	Документ.ДополнительныеСвойства.Вставить("ПроведениеДокументов", Новый Структура);
	
	СвойстваДокумента = Новый ФиксированнаяСтруктура("ЭтоНовый, РежимЗаписи, РежимПроведения, Проведен",
		Документ.ЭтоНовый(),
		РежимЗаписи,
		РежимПроведения,
		Документ.Проведен);
	
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("СвойстваДокумента", СвойстваДокумента);
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("ТаблицыКонтроля", Новый Структура);
	
КонецПроцедуры

// Формирует в обработчике документа ПриЗаписи() движения по независимым регистрам, определенных в учетных документах.
//
// Параметры:
//  Документ - ДокументОбъект - Записываемый документ
//  Отказ - Булево - Признак отказа от записи.
//
Процедура ПриЗаписиДокумента(Документ, Отказ) Экспорт
	
	Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ЗаписатьДокумент(Документ, Отказ);
	ИначеЕсли СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ЗаписатьДокумент(Документ, Отказ);
		ПровестиДокумент(Документ, Отказ, Неопределено);	
	КонецЕсли;
		
КонецПроцедуры


// Очищает в обработчике документа ОбработкаУдаленияПроведения() движения по подчиненным регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево -  признак отказа от записи.
//
Процедура ОбработкаУдаленияПроведенияДокумента(Документ, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает список свойств проводимого документа.
//
// Параметры:
//  Документ - ДокументОбъект - документ, по которому необходимо получить свойства.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - со свойствами:
//     * ЭтоНовый - Булево - Истина - документ перед записью не был записан в базу, Ложь - документ уже был записан
//     * Проведен - Булево - Истина - документ перед записью уже был проведен; Ложь - документ не был проведен
//     * РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа
//     * РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Функция СвойстваДокумента(Знач Документ) Экспорт
	
	Возврат Документ.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента;
	
КонецФункции

#КонецОбласти 

Процедура ЗаписатьДокумент(Документ, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = СвойстваДокумента(Документ);
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	
КонецПроцедуры



